// IMPORTANT: This file is automatically generated
// If you would like to update it, try yarn updateDefinitions
import { makePlaceholder, PlaceholderTypes } from '../makeValue'
import { remoteCall } from './remote'

type HasNumber<T> = T extends 'Class' | 'Effect' | 'Item' | 'Monster' | 'Skill'
	? true
	: false

type ValidIdentifier<T extends boolean> = T extends true
	? number | string
	: string

abstract class MafiaClass<T extends PlaceholderTypes> {
	static readonly staticType: PlaceholderTypes
	readonly objectType: T
	readonly identifierString: string
	readonly identifierNumber: HasNumber<T> extends true ? number : undefined

	constructor(values: MafiaClass<T>) {
		this.objectType = values.objectType
		this.identifierString = values.identifierString
		this.identifierNumber = values.identifierNumber
		this.replaceValues(values)
	}

	replaceValues(values: MafiaClass<T>) {
		Object.assign(this, values)
	}

	static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
		this: {
			new (values: MafiaClass<U>): V
			readonly staticType: PlaceholderTypes
		},
		idOrArray: ValidIdentifier<HasNumber<U>>
	): V
	static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
		this: {
			new (values: MafiaClass<U>): V
			readonly staticType: PlaceholderTypes
		},
		idOrArray: ValidIdentifier<HasNumber<U>>[]
	): V[]
	static get<U extends PlaceholderTypes, V extends MafiaClass<U>>(
		this: {
			new (values: MafiaClass<U>): V
			readonly staticType: PlaceholderTypes
		},
		idOrArray: ValidIdentifier<HasNumber<U>> | ValidIdentifier<HasNumber<U>>[]
	): V | V[] {
		const ids = Array.isArray(idOrArray) ? idOrArray : [idOrArray]

		const results = ids.map((id) => {
			const placeholder = makePlaceholder(this.staticType, id)
			const default_ =
				'identifierNumber' in placeholder
					? {
							...placeholder,
							identifierString: `${placeholder.identifierNumber}`,
					  }
					: {
							...placeholder,
							identifierNumber: -1,
					  }
			return remoteCall('identity', [placeholder], default_) as V
		})

		return Array.isArray(idOrArray) ? results : results[0]
	}

	static all<U extends PlaceholderTypes, V extends MafiaClass<U>>(): V[] {
		return remoteCall('all', [this.staticType], []) as V[]
	}
}

